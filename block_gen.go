package skein

//import "fmt"

// Encrypt encrypts a block p with the given subkeys.
func encrypt512(p *[8]uint64, s *[19][8]uint64) {
	//fmt.Printf("Initial state: %x\n", p)
	//fmt.Printf("Key schedule: %x\n", s[0])
	for i := 0; i < 72; i += 8 {

		p[0] += s[i/4+0/4][0]

		p[1] += s[i/4+0/4][1]

		p[2] += s[i/4+0/4][2]

		p[3] += s[i/4+0/4][3]

		p[4] += s[i/4+0/4][4]

		p[5] += s[i/4+0/4][5]

		p[6] += s[i/4+0/4][6]

		p[7] += s[i/4+0/4][7]

		//fmt.Printf("State after key injection: %x\n", p)

		p[0] += p[1]
		p[1] = p[1]<<46 | p[1]>>(64-46)
		p[1] ^= p[0]

		p[2] += p[3]
		p[3] = p[3]<<36 | p[3]>>(64-36)
		p[3] ^= p[2]

		p[4] += p[5]
		p[5] = p[5]<<19 | p[5]>>(64-19)
		p[5] ^= p[4]

		p[6] += p[7]
		p[7] = p[7]<<37 | p[7]>>(64-37)
		p[7] ^= p[6]

		//fmt.Printf("State after round %d: %x\n", i+0+1, p)

		p[2] += p[1]
		p[1] = p[1]<<33 | p[1]>>(64-33)
		p[1] ^= p[2]

		p[4] += p[7]
		p[7] = p[7]<<27 | p[7]>>(64-27)
		p[7] ^= p[4]

		p[6] += p[5]
		p[5] = p[5]<<14 | p[5]>>(64-14)
		p[5] ^= p[6]

		p[0] += p[3]
		p[3] = p[3]<<42 | p[3]>>(64-42)
		p[3] ^= p[0]

		//fmt.Printf("State after round %d: %x\n", i+1+1, p)

		p[4] += p[1]
		p[1] = p[1]<<17 | p[1]>>(64-17)
		p[1] ^= p[4]

		p[6] += p[3]
		p[3] = p[3]<<49 | p[3]>>(64-49)
		p[3] ^= p[6]

		p[0] += p[5]
		p[5] = p[5]<<36 | p[5]>>(64-36)
		p[5] ^= p[0]

		p[2] += p[7]
		p[7] = p[7]<<39 | p[7]>>(64-39)
		p[7] ^= p[2]

		//fmt.Printf("State after round %d: %x\n", i+2+1, p)

		p[6] += p[1]
		p[1] = p[1]<<44 | p[1]>>(64-44)
		p[1] ^= p[6]

		p[0] += p[7]
		p[7] = p[7]<<9 | p[7]>>(64-9)
		p[7] ^= p[0]

		p[2] += p[5]
		p[5] = p[5]<<54 | p[5]>>(64-54)
		p[5] ^= p[2]

		p[4] += p[3]
		p[3] = p[3]<<56 | p[3]>>(64-56)
		p[3] ^= p[4]

		//fmt.Printf("State after round %d: %x\n", i+3+1, p)

		p[0] += s[i/4+4/4][0]

		p[1] += s[i/4+4/4][1]

		p[2] += s[i/4+4/4][2]

		p[3] += s[i/4+4/4][3]

		p[4] += s[i/4+4/4][4]

		p[5] += s[i/4+4/4][5]

		p[6] += s[i/4+4/4][6]

		p[7] += s[i/4+4/4][7]

		//fmt.Printf("State after key injection: %x\n", p)

		p[0] += p[1]
		p[1] = p[1]<<39 | p[1]>>(64-39)
		p[1] ^= p[0]

		p[2] += p[3]
		p[3] = p[3]<<30 | p[3]>>(64-30)
		p[3] ^= p[2]

		p[4] += p[5]
		p[5] = p[5]<<34 | p[5]>>(64-34)
		p[5] ^= p[4]

		p[6] += p[7]
		p[7] = p[7]<<24 | p[7]>>(64-24)
		p[7] ^= p[6]

		//fmt.Printf("State after round %d: %x\n", i+4+1, p)

		p[2] += p[1]
		p[1] = p[1]<<13 | p[1]>>(64-13)
		p[1] ^= p[2]

		p[4] += p[7]
		p[7] = p[7]<<50 | p[7]>>(64-50)
		p[7] ^= p[4]

		p[6] += p[5]
		p[5] = p[5]<<10 | p[5]>>(64-10)
		p[5] ^= p[6]

		p[0] += p[3]
		p[3] = p[3]<<17 | p[3]>>(64-17)
		p[3] ^= p[0]

		//fmt.Printf("State after round %d: %x\n", i+5+1, p)

		p[4] += p[1]
		p[1] = p[1]<<25 | p[1]>>(64-25)
		p[1] ^= p[4]

		p[6] += p[3]
		p[3] = p[3]<<29 | p[3]>>(64-29)
		p[3] ^= p[6]

		p[0] += p[5]
		p[5] = p[5]<<39 | p[5]>>(64-39)
		p[5] ^= p[0]

		p[2] += p[7]
		p[7] = p[7]<<43 | p[7]>>(64-43)
		p[7] ^= p[2]

		//fmt.Printf("State after round %d: %x\n", i+6+1, p)

		p[6] += p[1]
		p[1] = p[1]<<8 | p[1]>>(64-8)
		p[1] ^= p[6]

		p[0] += p[7]
		p[7] = p[7]<<35 | p[7]>>(64-35)
		p[7] ^= p[0]

		p[2] += p[5]
		p[5] = p[5]<<56 | p[5]>>(64-56)
		p[5] ^= p[2]

		p[4] += p[3]
		p[3] = p[3]<<22 | p[3]>>(64-22)
		p[3] ^= p[4]

		//fmt.Printf("State after round %d: %x\n", i+7+1, p)

	}

	p[0] += s[len(s)-1][0]

	p[1] += s[len(s)-1][1]

	p[2] += s[len(s)-1][2]

	p[3] += s[len(s)-1][3]

	p[4] += s[len(s)-1][4]

	p[5] += s[len(s)-1][5]

	p[6] += s[len(s)-1][6]

	p[7] += s[len(s)-1][7]

}

// Decrypt decrypts a block p using the given subkeys.
func decrypt512(p *[8]uint64, s *[19][8]uint64) {

	p[0] -= s[len(s)-1][0]

	p[1] -= s[len(s)-1][1]

	p[2] -= s[len(s)-1][2]

	p[3] -= s[len(s)-1][3]

	p[4] -= s[len(s)-1][4]

	p[5] -= s[len(s)-1][5]

	p[6] -= s[len(s)-1][6]

	p[7] -= s[len(s)-1][7]

	for i := 72 - 8; i >= 0; i -= 8 {

		p[3] ^= p[4]
		p[3] = p[3]<<(64-22) | p[3]>>22
		p[4] -= p[3]

		p[5] ^= p[2]
		p[5] = p[5]<<(64-56) | p[5]>>56
		p[2] -= p[5]

		p[7] ^= p[0]
		p[7] = p[7]<<(64-35) | p[7]>>35
		p[0] -= p[7]

		p[1] ^= p[6]
		p[1] = p[1]<<(64-8) | p[1]>>8
		p[6] -= p[1]

		p[7] ^= p[2]
		p[7] = p[7]<<(64-43) | p[7]>>43
		p[2] -= p[7]

		p[5] ^= p[0]
		p[5] = p[5]<<(64-39) | p[5]>>39
		p[0] -= p[5]

		p[3] ^= p[6]
		p[3] = p[3]<<(64-29) | p[3]>>29
		p[6] -= p[3]

		p[1] ^= p[4]
		p[1] = p[1]<<(64-25) | p[1]>>25
		p[4] -= p[1]

		p[3] ^= p[0]
		p[3] = p[3]<<(64-17) | p[3]>>17
		p[0] -= p[3]

		p[5] ^= p[6]
		p[5] = p[5]<<(64-10) | p[5]>>10
		p[6] -= p[5]

		p[7] ^= p[4]
		p[7] = p[7]<<(64-50) | p[7]>>50
		p[4] -= p[7]

		p[1] ^= p[2]
		p[1] = p[1]<<(64-13) | p[1]>>13
		p[2] -= p[1]

		p[7] ^= p[6]
		p[7] = p[7]<<(64-24) | p[7]>>24
		p[6] -= p[7]

		p[5] ^= p[4]
		p[5] = p[5]<<(64-34) | p[5]>>34
		p[4] -= p[5]

		p[3] ^= p[2]
		p[3] = p[3]<<(64-30) | p[3]>>30
		p[2] -= p[3]

		p[1] ^= p[0]
		p[1] = p[1]<<(64-39) | p[1]>>39
		p[0] -= p[1]

		p[0] -= s[i/4+4/4][0]

		p[1] -= s[i/4+4/4][1]

		p[2] -= s[i/4+4/4][2]

		p[3] -= s[i/4+4/4][3]

		p[4] -= s[i/4+4/4][4]

		p[5] -= s[i/4+4/4][5]

		p[6] -= s[i/4+4/4][6]

		p[7] -= s[i/4+4/4][7]

		p[3] ^= p[4]
		p[3] = p[3]<<(64-56) | p[3]>>56
		p[4] -= p[3]

		p[5] ^= p[2]
		p[5] = p[5]<<(64-54) | p[5]>>54
		p[2] -= p[5]

		p[7] ^= p[0]
		p[7] = p[7]<<(64-9) | p[7]>>9
		p[0] -= p[7]

		p[1] ^= p[6]
		p[1] = p[1]<<(64-44) | p[1]>>44
		p[6] -= p[1]

		p[7] ^= p[2]
		p[7] = p[7]<<(64-39) | p[7]>>39
		p[2] -= p[7]

		p[5] ^= p[0]
		p[5] = p[5]<<(64-36) | p[5]>>36
		p[0] -= p[5]

		p[3] ^= p[6]
		p[3] = p[3]<<(64-49) | p[3]>>49
		p[6] -= p[3]

		p[1] ^= p[4]
		p[1] = p[1]<<(64-17) | p[1]>>17
		p[4] -= p[1]

		p[3] ^= p[0]
		p[3] = p[3]<<(64-42) | p[3]>>42
		p[0] -= p[3]

		p[5] ^= p[6]
		p[5] = p[5]<<(64-14) | p[5]>>14
		p[6] -= p[5]

		p[7] ^= p[4]
		p[7] = p[7]<<(64-27) | p[7]>>27
		p[4] -= p[7]

		p[1] ^= p[2]
		p[1] = p[1]<<(64-33) | p[1]>>33
		p[2] -= p[1]

		p[7] ^= p[6]
		p[7] = p[7]<<(64-37) | p[7]>>37
		p[6] -= p[7]

		p[5] ^= p[4]
		p[5] = p[5]<<(64-19) | p[5]>>19
		p[4] -= p[5]

		p[3] ^= p[2]
		p[3] = p[3]<<(64-36) | p[3]>>36
		p[2] -= p[3]

		p[1] ^= p[0]
		p[1] = p[1]<<(64-46) | p[1]>>46
		p[0] -= p[1]

		p[0] -= s[i/4+0/4][0]

		p[1] -= s[i/4+0/4][1]

		p[2] -= s[i/4+0/4][2]

		p[3] -= s[i/4+0/4][3]

		p[4] -= s[i/4+0/4][4]

		p[5] -= s[i/4+0/4][5]

		p[6] -= s[i/4+0/4][6]

		p[7] -= s[i/4+0/4][7]

	}
}

// Expand expands a key and tweak into subkeys.
func expand(s *[19][8]uint64, k *[9]uint64, t *[3]uint64) {
	t[2] = t[0] ^ t[1]
	k[8] = c240 ^ k[0] ^ k[1] ^ k[2] ^ k[3] ^ k[4] ^ k[5] ^ k[6] ^ k[7]
	for i := 0; i < len(*s); i++ {

		s[i][0] = k[(i+0)%9]

		s[i][1] = k[(i+1)%9]

		s[i][2] = k[(i+2)%9]

		s[i][3] = k[(i+3)%9]

		s[i][4] = k[(i+4)%9]

		s[i][5] = k[(i+5)%9]

		s[i][6] = k[(i+6)%9]

		s[i][7] = k[(i+7)%9]

		s[i][5] += t[(i+0)%3]
		s[i][6] += t[(i+1)%3]
		s[i][7] += uint64(i)
	}
}
